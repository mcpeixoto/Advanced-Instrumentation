

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                                           Tue Dec  6 14:33:59 2022


     1                           	processor	18F47Q10
     2                           	pagewidth 132
     3                           	opt	flic
     4                           	psect	udata_acs,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     5                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	udata_bank1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     7                           	psect	udata_bank2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     8                           	psect	udata_bank3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     9                           	psect	udata_bank4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    10                           	psect	udata_bank5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    11                           	psect	udata_bank6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    12                           	psect	udata_bank7,global,class=BANK7,space=1,delta=1,lowdata,noexec
    13                           	psect	udata_bank8,global,class=BANK8,space=1,delta=1,lowdata,noexec
    14                           	psect	udata_bank9,global,class=BANK9,space=1,delta=1,lowdata,noexec
    15                           	psect	udata_bank10,global,class=BANK10,space=1,delta=1,lowdata,noexec
    16                           	psect	udata_bank11,global,class=BANK11,space=1,delta=1,lowdata,noexec
    17                           	psect	udata_bank12,global,class=BANK12,space=1,delta=1,lowdata,noexec
    18                           	psect	udata_bank14,global,class=BANK14,space=1,delta=1,lowdata,noexec
    19                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
    20                           	psect	code,global,reloc=2,class=CODE,delta=1
    21                           	psect	data,global,reloc=2,class=CONST,delta=1,noexec
    22                           	psect	edata,global,class=EEDATA,space=3,delta=2,noexec
    23                           	psect	intcode,global,delta=1
    24   000000                     
    25                           	psect	edata
    26   000000                     stk_offset	set	0
    27   000000                     auto_size	set	0
    28                           
    29                           ; stack_auto defines a symbol /name/_offset which equates to the
    30                           ; stack offset of the auto object in question
    31   000000                     
    32                           ; stack_param defines a symbol /name/_offset which equates to the
    33                           ; stack offset of the parameter object in question
    34   000000                     
    35                           ; alloc_stack adjusts the SP to allocate space for auto objects
    36                           ; it also links in to the btemp symbol so that can be used
    37   000000                     
    38                           ; restore_stack adjusts the SP to remove all auto and parameter
    39                           ; objects from the stack prior to returning from a function
    40   000000                     
    41                           	psect	intcode
    42   000008                     _int_handler:
    43                           	callstack 0
    44                           
    45                           ;when an interrupt happens, this function is called. It is your job to verify what interrupt happene
      +                          d and act accordingly
    46   000008  010E               	banksel	3781
    47   00000A  BBC5               	btfsc	3781,5,b	; Q:check if the timer0 interrupt flag is set. If so, go to timer0_int_handler. If n
      +                          ot, skip.
    48   00000C  D008               	goto	_timer0_int_handler
    49   00000E  010E               	banksel	3782
    50   000010  B1C6               	btfsc	3782,0,b	;Q: check if the ADC interrupt flag is set. If so, go to adc_int_handler. If not, sk
      +                          ip.
    51   000012  D011               	goto	_adc_int_handler
    52   000014  010E               	banksel	3784
    53   000016  BBC8               	btfsc	3784,5,b	;Q: check if the EUSART1 RX flag is set. If so, go to the C function _getch. If not,
      +                           skip.
    54   000018  ECFA  F00A         	call	_getch
    55   00001C  0010               	retfie	
    56   00001E                     _timer0_int_handler:
    57   00001E  010F               	banksel	3930
    58   000020  0E08               	movlw	8	;set ((PORTA) and 0FFh), 0, a as ADC input
    59   000022  6F5A               	movwf	3930,b
    60   000024  010F               	banksel	3931
    61   000026  815B               	bsf	3931,0,b
    62   000028  010F               	banksel	3980
    63   00002A  7A8C               	btg	3980,5,c	;TOGGLE LED ON PORTA,5
    64   00002C  010E               	banksel	3781
    65   00002E  9BC5               	bcf	3781,5,b	;clear timer_int flag
    66   000030  ECE9  F00A         	call	_envia_bit	;
    67   000034  0010               	retfie		;return from interruption
    68   000036                     _adc_int_handler:
    69   000036  010F               	banksel	3935
    70   000038  CF5F F021          	movff	3935,_adc_result	;put the highest 8 bits of the conversion result in 0
    71                           
    72                           ;here I am just changing the value of the byte read by the ADC to a value we know for debug purposes
    73                           ;MOVLW 0b11111111
    74                           ;MOVWF 0
    75                           ; Sends data to computer
    76                           ;BANKSEL TX1REG
    77                           ;MOVFF 0, TX1REG ;Q: put the 8 MSB of the ADC conversion in the UART TX.
    78   00003C  010E               	banksel	3782
    79   00003E  91C6               	bcf	3782,0,b	;clear the ADC interrupt flag
    80                           
    81                           ;call _show_adc_result
    82   000040  0010               	retfie		;return from interruption
    83                           tosu	equ	0xFFF
    84                           tosh	equ	0xFFE
    85                           tosl	equ	0xFFD
    86                           stkptr	equ	0xFFC
    87                           pclatu	equ	0xFFB
    88                           pclath	equ	0xFFA
    89                           pcl	equ	0xFF9
    90                           tblptru	equ	0xFF8
    91                           tblptrh	equ	0xFF7
    92                           tblptrl	equ	0xFF6
    93                           tablat	equ	0xFF5
    94                           prodh	equ	0xFF4
    95                           prodl	equ	0xFF3
    96                           indf0	equ	0xFEF
    97                           postinc0	equ	0xFEE
    98                           postdec0	equ	0xFED
    99                           preinc0	equ	0xFEC
   100                           plusw0	equ	0xFEB
   101                           fsr0h	equ	0xFEA
   102                           fsr0l	equ	0xFE9
   103                           wreg	equ	0xFE8
   104                           indf1	equ	0xFE7
   105                           postinc1	equ	0xFE6
   106                           postdec1	equ	0xFE5
   107                           preinc1	equ	0xFE4
   108                           plusw1	equ	0xFE3
   109                           fsr1h	equ	0xFE2
   110                           fsr1l	equ	0xFE1
   111                           bsr	equ	0xFE0
   112                           indf2	equ	0xFDF
   113                           postinc2	equ	0xFDE
   114                           postdec2	equ	0xFDD
   115                           preinc2	equ	0xFDC
   116                           plusw2	equ	0xFDB
   117                           fsr2h	equ	0xFDA
   118                           fsr2l	equ	0xFD9
   119                           status	equ	0xFD8


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                               Tue Dec  6 14:33:59 2022

                           PIR0 000EC5                             PIR1 000EC6                             PIR3 000EC8  
                          ADPCH 000F5A                            PORTA 000F8C                           ADCON0 000F5B  
                         ADRESH 000F5F                           _getch 15F4                          isa$std 000001  
                    _adc_result 0021                         _comutar 0022                 _show_adc_result 1036  
            _timer0_int_handler 001E                       _envia_bit 15D2                 _adc_int_handler 0036  
                   _int_handler 0008                        isa$xinst 000000  
